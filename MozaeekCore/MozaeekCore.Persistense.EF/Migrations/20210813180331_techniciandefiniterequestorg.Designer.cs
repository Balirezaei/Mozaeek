// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MozaeekCore.Persistense.EF;

namespace MozaeekCore.Persistense.EF.Migrations
{
    [DbContext(typeof(CoreDomainContext))]
    [Migration("20210813180331_technicianDefiniterequestorg")]
    partial class TechnicianDefiniterequestorg
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MozaeekCore.Domain.Announcement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FileId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasRequest")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestTargetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestTargetId");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("MozaeekCore.Domain.AnnouncementPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<long>("PointId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("PointId");

                    b.ToTable("AnnouncementPoint");
                });

            modelBuilder.Entity("MozaeekCore.Domain.DefiniteRequestOrg", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PointId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestOrgId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PointId");

                    b.HasIndex("RequestOrgId");

                    b.ToTable("DefiniteRequestOrg");
                });

            modelBuilder.Entity("MozaeekCore.Domain.EducationField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("EducationField");
                });

            modelBuilder.Entity("MozaeekCore.Domain.EducationGrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EducationGrade");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("LastExpiredToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Identity.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Label", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("MozaeekCore.Domain.MosaikFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasMaxLength(20);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("File");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Point", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Point");
                });

            modelBuilder.Entity("MozaeekCore.Domain.PreRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("PreRequest");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Pricing.PriceCurrency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("PriceCurrency");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CurrencyCode = "IRR",
                            Unit = "ریال"
                        });
                });

            modelBuilder.Entity("MozaeekCore.Domain.Pricing.RequestPriceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestPriceHeaderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestPriceHeaderId");

                    b.ToTable("RequestPriceDetails");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Pricing.RequestPriceHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PriceAmount")
                        .HasColumnType("int");

                    b.Property<long>("PriceCurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("SystemShare")
                        .HasColumnType("smallint");

                    b.Property<short>("TechnicianShare")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("PriceCurrencyId");

                    b.ToTable("RequestPriceHeader");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Pricing.SubjectPriceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectPriceHeaderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SubjectPriceHeaderId");

                    b.ToTable("SubjectPriceDetails");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Pricing.SubjectPriceHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PriceAmount")
                        .HasColumnType("int");

                    b.Property<long>("PriceCurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("SystemShare")
                        .HasColumnType("smallint");

                    b.Property<short>("TechnicianShare")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("PriceCurrencyId");

                    b.ToTable("SubjectPriceHeader");
                });

            modelBuilder.Entity("MozaeekCore.Domain.RSS", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IntervalDataReceiveHours")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("RSS");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Request", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("FullOnline")
                        .HasColumnType("bit");

                    b.Property<string>("Regulation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestActId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RequestExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestStartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RequestTargetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequestActId");

                    b.HasIndex("RequestTargetId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestAct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("RequestAct");
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestOrg", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("RequestOrg");
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PointId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PointId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestPoint");
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestTarget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDocument")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RequestTarget");
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestTargetLabel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("LabelId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestTargetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.HasIndex("RequestTargetId");

                    b.ToTable("RequestTargetLabel");
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestTargetRequestOrg", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RequestOrgId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestTargetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequestOrgId");

                    b.HasIndex("RequestTargetId");

                    b.ToTable("RequestTargetRequestOrg");
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestTargetSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RequestTargetId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequestTargetId");

                    b.HasIndex("SubjectId");

                    b.ToTable("RequestTargetSubject");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Technician", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FirstVerification")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PointId")
                        .HasColumnType("bigint");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SecondVerification")
                        .HasColumnType("bit");

                    b.Property<long?>("TechnicianContactInfoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TechnicianEducationalInfoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TechnicianPersonalInfoId")
                        .HasColumnType("bigint");

                    b.Property<int>("TechnicianType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PointId");

                    b.HasIndex("TechnicianContactInfoId");

                    b.HasIndex("TechnicianEducationalInfoId");

                    b.HasIndex("TechnicianPersonalInfoId");

                    b.ToTable("Technician");
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long>("TechnicianId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("TechnicianAttachment");
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianContactInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("OfficeNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TechnicianContactInfo");
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianDefiniteRequestOrg", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DefiniteRequestOrgId")
                        .HasColumnType("bigint");

                    b.Property<long>("TechnicianId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DefiniteRequestOrgId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("TechnicianDefiniteRequestOrg");
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianEducationalInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EducationFieldId")
                        .HasColumnType("bigint");

                    b.Property<long>("EducationGradeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EducationFieldId");

                    b.HasIndex("EducationGradeId");

                    b.ToTable("TechnicianEducationalInfo");
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianOfflineRequestTarget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RquestTargetId")
                        .HasColumnType("bigint");

                    b.Property<long>("TechnicianId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RquestTargetId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("TechnicianOfflineRequestTarget");
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianPersonalInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("TechnicianPersonalInfo");
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TechnicianId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("TechnicianSubject");
                });

            modelBuilder.Entity("MozaeekCore.ViewModel.RSSNews", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RSSId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RssNewses");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Announcement", b =>
                {
                    b.HasOne("MozaeekCore.Domain.MosaikFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("MozaeekCore.Domain.Request", "Request")
                        .WithMany("Announcements")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MozaeekCore.Domain.RequestTarget", "RequestTarget")
                        .WithMany("Announcements")
                        .HasForeignKey("RequestTargetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.AnnouncementPoint", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Announcement", "Announcement")
                        .WithMany("AnnouncementPoints")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.Point", "Point")
                        .WithMany("AnnouncementPoints")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.DefiniteRequestOrg", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Point", "Point")
                        .WithMany()
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.RequestOrg", "RequestOrg")
                        .WithMany("DefiniteRequestOrgs")
                        .HasForeignKey("RequestOrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.EducationField", b =>
                {
                    b.HasOne("MozaeekCore.Domain.EducationField", "Parent")
                        .WithMany("SubEducationFields")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("MozaeekCore.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.Label", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Label", "Parent")
                        .WithMany("SubLabels")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Point", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Point", "Parent")
                        .WithMany("SubPoints")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Pricing.RequestPriceDetail", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.Pricing.RequestPriceHeader", "RequestPriceHeader")
                        .WithMany("PriceDetails")
                        .HasForeignKey("RequestPriceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.Pricing.RequestPriceHeader", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Pricing.PriceCurrency", "PriceCurrency")
                        .WithMany("RequestPriceHeaders")
                        .HasForeignKey("PriceCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.Pricing.SubjectPriceDetail", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.Pricing.SubjectPriceHeader", "SubjectPriceHeader")
                        .WithMany("PriceDetails")
                        .HasForeignKey("SubjectPriceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.Pricing.SubjectPriceHeader", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Pricing.PriceCurrency", "PriceCurrency")
                        .WithMany("SubjectPriceHeaders")
                        .HasForeignKey("PriceCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.Request", b =>
                {
                    b.HasOne("MozaeekCore.Domain.RequestAct", "RequestAct")
                        .WithMany("Requests")
                        .HasForeignKey("RequestActId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.RequestTarget", "RequestTarget")
                        .WithMany("Requests")
                        .HasForeignKey("RequestTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("MozaeekCore.Domain.RequestAction", "RequestActions", b1 =>
                        {
                            b1.Property<long>("RequestId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Priority")
                                .HasColumnType("int");

                            b1.HasKey("RequestId", "Id");

                            b1.ToTable("RequestAction");

                            b1.WithOwner()
                                .HasForeignKey("RequestId");
                        });

                    b.OwnsMany("MozaeekCore.Domain.RequestDocument", "RequestDocuments", b1 =>
                        {
                            b1.Property<long>("RequestId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Priority")
                                .HasColumnType("int");

                            b1.HasKey("RequestId", "Id");

                            b1.ToTable("RequestDocument");

                            b1.WithOwner()
                                .HasForeignKey("RequestId");
                        });

                    b.OwnsMany("MozaeekCore.Domain.RequestNecessity", "RequestNecessities", b1 =>
                        {
                            b1.Property<long>("RequestId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Priority")
                                .HasColumnType("int");

                            b1.HasKey("RequestId", "Id");

                            b1.ToTable("RequestNecessity");

                            b1.WithOwner()
                                .HasForeignKey("RequestId");
                        });

                    b.OwnsMany("MozaeekCore.Domain.RequestQualification", "RequestQualifications", b1 =>
                        {
                            b1.Property<long>("RequestId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Priority")
                                .HasColumnType("int");

                            b1.HasKey("RequestId", "Id");

                            b1.ToTable("RequestQualification");

                            b1.WithOwner()
                                .HasForeignKey("RequestId");
                        });

                    b.OwnsMany("MozaeekCore.Domain.RequestTargetConnection", "RequestTargetConnections", b1 =>
                        {
                            b1.Property<long>("RequestId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long>("RequestTargetId")
                                .HasColumnType("bigint");

                            b1.HasKey("RequestId", "Id");

                            b1.ToTable("RequestTargetConnection");

                            b1.WithOwner()
                                .HasForeignKey("RequestId");
                        });
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestOrg", b =>
                {
                    b.HasOne("MozaeekCore.Domain.RequestOrg", "Parent")
                        .WithMany("SubRequestOrgs")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestPoint", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Point", "Point")
                        .WithMany("RequestPoints")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.Request", "Request")
                        .WithMany("RequestPoints")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestTargetLabel", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Label", "Label")
                        .WithMany("RequestTargetLabels")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.RequestTarget", "RequestTarget")
                        .WithMany("RequestTargetLabels")
                        .HasForeignKey("RequestTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestTargetRequestOrg", b =>
                {
                    b.HasOne("MozaeekCore.Domain.RequestOrg", "RequestOrg")
                        .WithMany("RequestTargetRequestOrgs")
                        .HasForeignKey("RequestOrgId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.RequestTarget", "RequestTarget")
                        .WithMany("RequestTargetRequestOrgs")
                        .HasForeignKey("RequestTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.RequestTargetSubject", b =>
                {
                    b.HasOne("MozaeekCore.Domain.RequestTarget", "RequestTarget")
                        .WithMany("RequestTargetSubjects")
                        .HasForeignKey("RequestTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.Subject", "Subject")
                        .WithMany("RequestTargetSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.Subject", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Subject", "Parent")
                        .WithMany("SubSubjects")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MozaeekCore.Domain.Technician", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Point", "Point")
                        .WithMany()
                        .HasForeignKey("PointId");

                    b.HasOne("MozaeekCore.Domain.TechnicianContactInfo", null)
                        .WithMany("Technicians")
                        .HasForeignKey("TechnicianContactInfoId");

                    b.HasOne("MozaeekCore.Domain.TechnicianEducationalInfo", null)
                        .WithMany("Technicians")
                        .HasForeignKey("TechnicianEducationalInfoId");

                    b.HasOne("MozaeekCore.Domain.TechnicianPersonalInfo", null)
                        .WithMany("Technicians")
                        .HasForeignKey("TechnicianPersonalInfoId");
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianAttachment", b =>
                {
                    b.HasOne("MozaeekCore.Domain.MosaikFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.Technician", "Technician")
                        .WithMany("TechnicianAttachements")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianDefiniteRequestOrg", b =>
                {
                    b.HasOne("MozaeekCore.Domain.DefiniteRequestOrg", "DefiniteRequestOrg")
                        .WithMany()
                        .HasForeignKey("DefiniteRequestOrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.Technician", "Technician")
                        .WithMany("TechnicianDefiniteRequestOrgs")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianEducationalInfo", b =>
                {
                    b.HasOne("MozaeekCore.Domain.EducationField", "EducationField")
                        .WithMany("TechnicianEducationalInfos")
                        .HasForeignKey("EducationFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.EducationGrade", "EducationGrade")
                        .WithMany("TechnicianEducationalInfos")
                        .HasForeignKey("EducationGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianOfflineRequestTarget", b =>
                {
                    b.HasOne("MozaeekCore.Domain.RequestTarget", "RquestTarget")
                        .WithMany()
                        .HasForeignKey("RquestTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.Technician", "Technician")
                        .WithMany("TechnicianOflineRequestTargets")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MozaeekCore.Domain.TechnicianSubject", b =>
                {
                    b.HasOne("MozaeekCore.Domain.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MozaeekCore.Domain.Technician", "Technician")
                        .WithMany("TechnicianSubjects")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
